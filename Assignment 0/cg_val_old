--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         6291456 B, 64 B, 12-way associative
Command:          ./classify rfile dfile 1009072 4 3
Data file:        cachegrind.out.59047
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir             I1mr  ILmr  Dr            D1mr        DLmr        Dw         D1mw      DLmw      
--------------------------------------------------------------------------------
34,195,240,917 3,563 3,423 6,344,460,904 380,359,515 379,489,648 99,928,092 1,472,234 1,471,149  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir             I1mr ILmr Dr            D1mr        DLmr        Dw         D1mw    DLmw     file:function
--------------------------------------------------------------------------------
18,202,683,177    8    8 3,042,358,242 378,795,432 378,070,544  3,027,300 381,051 381,051  /home/levio_sa/IITD Folder/Sem6/COL380/Submission/Original/classify.cpp:classify(Data&, Ranges const&, unsigned int) [clone ._omp_fn.1]
15,115,243,422    3    3 3,029,708,550      13,504      10,196  3,027,216       0       0  /home/levio_sa/IITD Folder/Sem6/COL380/Submission/Original/classify.h:classify(Data&, Ranges const&, unsigned int) [clone ._omp_fn.0]
   519,253,851   37   37   172,281,847         339         220 53,900,944       0       0  ???:std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const
   144,100,338  680  667    39,665,691         854         653  9,102,271     270     249  ???:???
    62,687,028   10   10    25,276,949          45          42  7,077,639       0       0  ???:std::istream::sentry::sentry(std::istream&, bool)
    55,609,012    5    5    17,188,240           2           1 10,110,730 126,135 126,135  ???:std::istream::operator>>(int&)

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/levio_sa/IITD Folder/Sem6/COL380/Submission/Original/classify.h
--------------------------------------------------------------------------------
Ir            I1mr ILmr Dr            D1mr   DLmr  Dw        D1mw    DLmw    

-- line 11 ----------------------------------------
            .    .    .             .      .     .         .       .       .  class Ranges;
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .  Data classify(Data &D, const Ranges &R, unsigned int numt);
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .  class alignas(32) Counter { // Aligned allocation per counter. Is that enough?
            .    .    .             .      .     .         .       .       .  			    // Keeps per-thread subcount.
            .    .    .             .      .     .         .       .       .  public:
            .    .    .             .      .     .         .       .       .     Counter(unsigned int num=MAXTHREADS) {
        3,003    0    0             0      0     0     3,003       0       0        _numcount = num;
        9,009    0    0             0      0     0     6,006       3       3        _counts = new unsigned int[num];
            .    .    .             .      .     .         .       .       .        assert(_counts != NULL);
            .    .    .             .      .     .         .       .       .        zero();
            .    .    .             .      .     .         .       .       .     }
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .     void zero() { // Initialize
      594,594    0    0         3,003      0     0         0       0       0        for(int i=0; i<_numcount; i++)
      192,192    3    3             0      0     0   192,192   9,670   9,670  	 _counts[i] = 0;
            .    .    .             .      .     .         .       .       .     }
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .     void increase(unsigned int id) { // If each sub-counter belongs to a thread mutual exclusion is not needed
    6,054,432    0    0     3,027,216      0     0         0       0       0        assert(id < _numcount);
   12,108,912    0    0     3,027,216 12,001 8,818 3,027,216       0       0        _counts[id]++;
            .    .    .             .      .     .         .       .       .     }
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .     void xincrease(unsigned int id) { // Safe increment
            .    .    .             .      .     .         .       .       .        assert(id < _numcount);
            .    .    .             .      .     .         .       .       .        const std::lock_guard<std::mutex> lock(cmutex);
            .    .    .             .      .     .         .       .       .        _counts[id]++;
            .    .    .             .      .     .         .       .       .     }
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .     unsigned int get(unsigned int id) const { // return subcounter value for specific thread
       24,024    2    2             0      0     0         0       0       0        assert(id < _numcount);
       24,024    0    0        12,012  3,002   825         0       0       0        return _counts[id];
            .    .    .             .      .     .         .       .       .     }
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .     void inspect() {
            .    .    .             .      .     .         .       .       .        std::cout << "Subcounts -- ";
            .    .    .             .      .     .         .       .       .        for(int i=0; i<_numcount; i++)
            .    .    .             .      .     .         .       .       .  	 std::cout << i << ":" << _counts[i] << " ";
            .    .    .             .      .     .         .       .       .        std::cout << "\n";
            .    .    .             .      .     .         .       .       .     }
-- line 51 ----------------------------------------
-- line 54 ----------------------------------------
            .    .    .             .      .     .         .       .       .     unsigned volatile int *_counts;
            .    .    .             .      .     .         .       .       .     unsigned int _numcount; // Per-thread subcounts 
            .    .    .             .      .     .         .       .       .     std::mutex cmutex;
            .    .    .             .      .     .         .       .       .  };
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .  struct Range { // Integer range
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .     Range(int a=1, int b=0) { // Constructor. Defaults to *bad* range
      501,501    1    1             0      0     0   501,501  61,877  61,877        lo = a;
    1,003,000    0    0             0      0     0   501,500       0       0        hi = b;
            .    .    .             .      .     .         .       .       .     }
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .     bool within(int val) const { // Return if val is within this range
6,041,253,804    0    0 3,017,599,686  1,503 1,378         0       0       0         return(lo <= val && val <= hi);
            .    .    .             .      .     .         .       .       .     }
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .     bool strictlyin(int val) const { // Return if val is strictly inside this range
    4,003,998    1    1     2,001,999      0     0         0       0       0         return(lo < val && val < hi);
            .    .    .             .      .     .         .       .       .     }
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .     int lo;
            .    .    .             .      .     .         .       .       .     int hi; 
            .    .    .             .      .     .         .       .       .  };
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .  class Ranges {
            .    .    .             .      .     .         .       .       .  public:
            .    .    .             .      .     .         .       .       .     Ranges() { // Initialize with a single unreal interval
            2    0    0             0      0     0         1       0       0        _num = 1;
            3    0    0             0      0     0         1       0       0        _ranges = new Range(1, 0); // Started with this. Its not a real interval as nothing lies inside it.
            .    .    .             .      .     .         .       .       .     }
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .     Ranges& operator+=(const Range range){ // Add one more interval to this list
            .    .    .             .      .     .         .       .       .        if(newrange(range)) { // If it already exists, do not add
            .    .    .             .      .     .         .       .       .           Range *oranges = _ranges;
    1,014,000    1    1             0      0     0     2,000       0       0           _ranges = new Range[_num+1];
            .    .    .             .      .     .         .       .       .           assert(NULL != _ranges);
    1,501,500    0    0             0      0     0         0       0       0           for(int r=0; r<_num; r++) { 
    1,001,000    0    0     1,001,000      0     0         0       0       0              set(r, oranges[r].lo, oranges[r].hi); // copy old intervals
            .    .    .             .      .     .         .       .       .           }
            .    .    .             .      .     .         .       .       .           set(_num++, range.lo, range.hi); // Add the new interval at the end
            .    .    .             .      .     .         .       .       .        }
            .    .    .             .      .     .         .       .       .        return *this;
            .    .    .             .      .     .         .       .       .     }
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .     int range(int val, bool strict = false) const { // Tell the range in which val lies (strict => boundary match not ok)
            .    .    .             .      .     .         .       .       .         if(strict) {
    5,001,000    2    2             0      0     0         0       0       0            for(int r=0; r<_num; r++) // Look through all intervals
            .    .    .             .      .     .         .       .       .               if(_ranges[r].strictlyin(val))
            .    .    .             .      .     .         .       .       .                  return r;
            .    .    .             .      .     .         .       .       .         } else {
7,537,944,783    3    3     3,027,216      0     0         0       0       0            for(int r=0; r<_num; r++) // Look through all intervals
1,517,881,491    0    0     3,027,216      0     0         0       0       0               if(_ranges[r].within(val))
            .    .    .             .      .     .         .       .       .                  return r;
            .    .    .             .      .     .         .       .       .         }
            .    .    .             .      .     .         .       .       .         return BADRANGE; // Did not find any range
            .    .    .             .      .     .         .       .       .     }
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .     void inspect() {
            .    .    .             .      .     .         .       .       .        for(int r=0; r<_num; r++) { 
            .    .    .             .      .     .         .       .       .           std::cout << r << "," << &_ranges[r] << ": " << _ranges[r].lo << ", " << _ranges[r].hi << "\n"; 
            .    .    .             .      .     .         .       .       .        }
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .     }
            .    .    .             .      .     .         .       .       .  
        9,006    0    0             0      0     0         0       0       0     int num() const { return _num; }
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .  private:
            .    .    .             .      .     .         .       .       .     Range *_ranges;
            .    .    .             .      .     .         .       .       .     int   _num;
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .     void set(int i, int lo, int hi) { // set the extreme values of a specific interval
            .    .    .             .      .     .         .       .       .        if(i < _num) {
      503,500    0    0             0      0     0   501,500       0       0            _ranges[i].lo = lo;
    1,002,000    0    0             0      0     0   501,500       0       0            _ranges[i].hi = hi;
            .    .    .             .      .     .         .       .       .        }
        1,000    0    0         1,000      0     0         0       0       0     }
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .     bool newrange(const Range r) { // Is the range r already in my list, or is it a new one?
        1,000    0    0             0      0     0         0       0       0        return (range(r.lo, true) == BADRANGE && range(r.hi, true) == BADRANGE); // Overlaps are not allowed.
            .    .    .             .      .     .         .       .       .     }
            .    .    .             .      .     .         .       .       .  };
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .  struct Data {
            .    .    .             .      .     .         .       .       .  
    4,036,288    1    1             0      0     0 4,036,288 504,536 504,536     struct Item {
            .    .    .             .      .     .         .       .       .        int key;
            .    .    .             .      .     .         .       .       .        int value = -1;
            .    .    .             .      .     .         .       .       .     };
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .     unsigned int ndata = 0;
            .    .    .             .      .     .         .       .       .     Item *data = NULL;
            .    .    .             .      .     .         .       .       .  
            3    0    0             0      0     0         3       3       0     Data(int n) { // n = Maximum number of items  storable
            3    0    0             0      0     0         3       0       0        ndata = n;
   12,108,926    2    2             6      0     0        14       6       3        data = new Item[n];
            .    .    .             .      .     .         .       .       .        assert(NULL != data);
            .    .    .             .      .     .         .       .       .     }
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .     void reset() {
    9,081,654    0    0             0      0     0         0       0       0        for(int i=0; i<ndata; i++)
    3,027,231    3    3             3      0     0 3,027,216 378,405 378,405           data[i].value = -1;
            .    .    .             .      .     .         .       .       .     }
            .    .    .             .      .     .         .       .       .     void inspect() {
            .    .    .             .      .     .         .       .       .        for(int i=0; i<ndata; i++)
            .    .    .             .      .     .         .       .       .           std::cout << i << ": " << data[i].key << " -- " << data[i].value <<"\n";
            .    .    .             .      .     .         .       .       .     }
            .    .    .             .      .     .         .       .       .  };

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/levio_sa/IITD Folder/Sem6/COL380/Submission/Original/classify.cpp
--------------------------------------------------------------------------------
Ir            I1mr ILmr Dr            D1mr        DLmr        Dw        D1mw    DLmw    

            .    .    .             .           .           .         .       .       .  #include "classify.h"
            .    .    .             .           .           .         .       .       .  #include <omp.h>
            .    .    .             .           .           .         .       .       .  
            .    .    .             .           .           .         .       .       .  Data classify(Data &D, const Ranges &R, unsigned int numt)
           36    5    5             3           0           0        21       0       0  { // Classify each item in D into intervals (given by R). Finally, produce in D2 data sorted by interval
            6    0    0             0           0           0         0       0       0     assert(numt < MAXTHREADS);
        9,270    7    7            51          49          49         3       3       0     Counter counts[R.num()]; // I need on counter per interval. Each counter can keep pre-thread subcount.
          213    2    2            99          25          20        75       3       0     #pragma omp parallel num_threads(numt)
            .    .    .             .           .           .         .       .       .     {
           12    0    0             0           0           0        12       0       0        int tid = omp_get_thread_num(); // I am thread number tid
   12,108,900    0    0     3,027,240          12           8         0       0       0        for(int i=tid; i<D.ndata; i+=numt) { // Threads together share-loop through all of Data
   12,108,900    3    3     3,027,240   1,513,614   1,387,480 3,027,216       1       0           int v = D.data[i].value = R.range(D.data[i].key);// For each data, find the interval of data's key,
            .    .    .             .           .           .         .       .       .  							  // and store the interval id in value. D is changed.
    3,027,216    0    0     3,027,216      12,001       8,716         0       0       0           counts[v].increase(tid); // Found one key in interval v
            .    .    .             .           .           .         .       .       .        }
            .    .    .             .           .           .         .       .       .     }
            .    .    .             .           .           .         .       .       .  
            .    .    .             .           .           .         .       .       .     // Accumulate all sub-counts (in each interval;'s counter) into rangecount
           21    0    0             3           0           0         3       0       0     unsigned int *rangecount = new unsigned int[R.num()];
        6,036    2    2             6           3           3         0       0       0     for(int r=0; r<R.num(); r++) { // For all intervals
        3,003    0    0             0           0           0     3,003     188     185        rangecount[r] = 0;
       45,045    0    0         6,006       3,003         757         0       0       0        for(int t=0; t<numt; t++) // For all threads
       12,012    0    0        12,012           0           0         0       0       0           rangecount[r] += counts[r].get(t);
            .    .    .             .           .           .         .       .       .        // std::cout << rangecount[r] << " elements in Range " << r << "\n"; // Debugging statement
            .    .    .             .           .           .         .       .       .     }
            .    .    .             .           .           .         .       .       .  
            .    .    .             .           .           .         .       .       .     // Compute prefx sum on rangecount.
        6,018    0    0             0           0           0         0       0       0     for(int i=1; i<R.num(); i++) {
        6,000    0    0         6,000         145           0         0       0       0        rangecount[i] += rangecount[i-1];
            .    .    .             .           .           .         .       .       .     }
            .    .    .             .           .           .         .       .       .  
            .    .    .             .           .           .         .       .       .     // Now rangecount[i] has the number of elements in intervals before the ith interval.
            .    .    .             .           .           .         .       .       .  
            3    1    1             3           3           3         0       0       0     Data D2 = Data(D.ndata); // Make a copy
            .    .    .             .           .           .         .       .       .     
          261    3    3           108          18          12        90       6       6     #pragma omp parallel num_threads(numt)
            .    .    .             .           .           .         .       .       .     {
           12    3    3             0           0           0        12       9       9        int tid = omp_get_thread_num();
        9,105    0    0         3,051       3,018       3,001         0       0       0        for(int r=tid; r<R.num(); r+=numt) { // Thread together share-loop through the intervals 
        3,003    0    0             0           0           0         0       0       0           int rcount = 0;
9,090,738,657    0    0         3,003           0           0         0       0       0           for(int d=0; d<D.ndata; d++) // For each interval, thread loops through all of data and  
6,060,486,432    2    2 3,030,243,216 378,783,414 378,058,563         0       0       0               if(D.data[d].value == r) // If the data item is in this interval 
3,051,445,740    0    0    12,108,864       8,982       8,968 3,027,216 381,042 381,042                   D2.data[rangecount[r-1]+rcount++] = D.data[d]; // Copy it to the appropriate place in D2.
            .    .    .             .           .           .         .       .       .        }
            .    .    .             .           .           .         .       .       .     }
            .    .    .             .           .           .         .       .       .  
            6    0    0             6           0           0         0       0       0     return D2;
           36    0    0            27           6           6         0       0       0  }

--------------------------------------------------------------------------------
Ir             I1mr ILmr Dr            D1mr        DLmr        Dw         D1mw      DLmw      
--------------------------------------------------------------------------------
33,389,902,826   47   47 6,084,191,727 380,340,799 379,478,607 18,357,595 1,335,752 1,335,736  events annotated

