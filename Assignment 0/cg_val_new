--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         6291456 B, 64 B, 12-way associative
Command:          ./classify rfile dfile 1009072 4 3
Data file:        cachegrind.out.6979
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir             I1mr  ILmr  Dr            D1mr      DLmr      Dw          D1mw      DLmw      
--------------------------------------------------------------------------------
16,114,331,706 3,593 3,454 3,338,615,325 2,131,923 1,990,137 102,955,475 1,469,610 1,468,518  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir             I1mr ILmr Dr            D1mr      DLmr      Dw         D1mw    DLmw     file:function
--------------------------------------------------------------------------------
15,118,459,887    4    4 3,029,897,763    13,322     2,432  3,027,228       0       0  /home/levio_sa/IITD Folder/Sem6/COL380/Submission/New/classify.h:classify(Data&, Ranges const&, unsigned int) [clone ._omp_fn.0]
   519,253,899   37   37   172,281,865       346       227 53,900,945       0       0  ???:std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const
   137,452,869  683  670    38,716,059       845       575  9,102,271     260     237  ???:???
   133,149,798    9    9    39,353,964 1,514,073 1,439,116  6,054,492 378,417 378,414  /home/levio_sa/IITD Folder/Sem6/COL380/Submission/New/classify.cpp:classify(Data&, Ranges const&, unsigned int) [clone ._omp_fn.1]
    62,687,032   10   10    25,276,950        38        35  7,077,640       0       0  ???:std::istream::sentry::sentry(std::istream&, bool)
    55,609,012    5    5    17,188,240         2         1 10,110,730 126,135 126,135  ???:std::istream::operator>>(int&)
    19,299,000   10   10     7,000,617   579,557   536,919  3,027,336      16       8  /home/levio_sa/IITD Folder/Sem6/COL380/Submission/New/classify.cpp:classify(Data&, Ranges const&, unsigned int) [clone ._omp_fn.0]

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/levio_sa/IITD Folder/Sem6/COL380/Submission/New/classify.h
--------------------------------------------------------------------------------
Ir            I1mr ILmr Dr            D1mr   DLmr  Dw        D1mw    DLmw    

-- line 11 ----------------------------------------
            .    .    .             .      .     .         .       .       .  class Ranges;
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .  Data classify(Data &D, const Ranges &R, unsigned int numt);
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .  class alignas(32) Counter { // Aligned allocation per counter. Is that enough?
            .    .    .             .      .     .         .       .       .  			    // Keeps per-thread subcount.
            .    .    .             .      .     .         .       .       .  public:
            .    .    .             .      .     .         .       .       .     Counter(unsigned int num=MAXTHREADS) {
        3,003    0    0             0      0     0     3,003       0       0        _numcount = num;
        9,009    0    0             0      0     0     6,006       3       3        _counts = new unsigned int[num];
            .    .    .             .      .     .         .       .       .        assert(_counts != NULL);
            .    .    .             .      .     .         .       .       .        zero();
            .    .    .             .      .     .         .       .       .     }
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .     void zero() { // Initialize
      594,594    0    0         3,003      0     0         0       0       0        for(int i=0; i<_numcount; i++)
      192,192    0    0             0      0     0   192,192   9,670   9,670  	 _counts[i] = 0;
            .    .    .             .      .     .         .       .       .     }
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .     void increase(unsigned int id) { // If each sub-counter belongs to a thread mutual exclusion is not needed
    6,054,432    0    0     3,027,216      0     0         0       0       0        assert(id < _numcount);
   15,136,116    0    0     3,027,216 11,925 1,875 3,027,228       0       0        _counts[id]++;
            .    .    .             .      .     .         .       .       .     }
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .     void xincrease(unsigned int id) { // Safe increment
            .    .    .             .      .     .         .       .       .        assert(id < _numcount);
            .    .    .             .      .     .         .       .       .        const std::lock_guard<std::mutex> lock(cmutex);
            .    .    .             .      .     .         .       .       .        _counts[id]++;
            .    .    .             .      .     .         .       .       .     }
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .     unsigned int get(unsigned int id) const { // return subcounter value for specific thread
       24,024    0    0             0      0     0         0       0       0        assert(id < _numcount);
       24,024    0    0        12,012  3,002   320         0       0       0        return _counts[id];
            .    .    .             .      .     .         .       .       .     }
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .     void inspect() {
            .    .    .             .      .     .         .       .       .        std::cout << "Subcounts -- ";
            .    .    .             .      .     .         .       .       .        for(int i=0; i<_numcount; i++)
            .    .    .             .      .     .         .       .       .  	 std::cout << i << ":" << _counts[i] << " ";
            .    .    .             .      .     .         .       .       .        std::cout << "\n";
            .    .    .             .      .     .         .       .       .     }
-- line 51 ----------------------------------------
-- line 54 ----------------------------------------
            .    .    .             .      .     .         .       .       .     unsigned volatile int *_counts;
            .    .    .             .      .     .         .       .       .     unsigned int _numcount; // Per-thread subcounts 
            .    .    .             .      .     .         .       .       .     std::mutex cmutex;
            .    .    .             .      .     .         .       .       .  };
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .  struct Range { // Integer range
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .     Range(int a=1, int b=0) { // Constructor. Defaults to *bad* range
      501,501    1    1             0      0     0   501,501  61,877  61,877        lo = a;
    1,003,000    0    0             0      0     0   501,500       0       0        hi = b;
            .    .    .             .      .     .         .       .       .     }
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .     bool within(int val) const { // Return if val is within this range
6,041,253,828    0    0 3,017,599,698  1,394   557         0       0       0         return(lo <= val && val <= hi);
            .    .    .             .      .     .         .       .       .     }
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .     bool strictlyin(int val) const { // Return if val is strictly inside this range
    4,003,998    1    1     2,001,999      0     0         0       0       0         return(lo < val && val < hi);
            .    .    .             .      .     .         .       .       .     }
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .     int lo;
            .    .    .             .      .     .         .       .       .     int hi; 
            .    .    .             .      .     .         .       .       .  };
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .  class Ranges {
            .    .    .             .      .     .         .       .       .  public:
            .    .    .             .      .     .         .       .       .     Ranges() { // Initialize with a single unreal interval
            2    0    0             0      0     0         1       0       0        _num = 1;
            3    0    0             0      0     0         1       0       0        _ranges = new Range(1, 0); // Started with this. Its not a real interval as nothing lies inside it.
            .    .    .             .      .     .         .       .       .     }
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .     Ranges& operator+=(const Range range){ // Add one more interval to this list
            .    .    .             .      .     .         .       .       .        if(newrange(range)) { // If it already exists, do not add
            .    .    .             .      .     .         .       .       .           Range *oranges = _ranges;
    1,014,000    1    1             0      0     0     2,000       0       0           _ranges = new Range[_num+1];
            .    .    .             .      .     .         .       .       .           assert(NULL != _ranges);
    1,501,500    0    0             0      0     0         0       0       0           for(int r=0; r<_num; r++) { 
    1,001,000    0    0     1,001,000      0     0         0       0       0              set(r, oranges[r].lo, oranges[r].hi); // copy old intervals
            .    .    .             .      .     .         .       .       .           }
            .    .    .             .      .     .         .       .       .           set(_num++, range.lo, range.hi); // Add the new interval at the end
            .    .    .             .      .     .         .       .       .        }
            .    .    .             .      .     .         .       .       .        return *this;
            .    .    .             .      .     .         .       .       .     }
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .     int range(int val, bool strict = false) const { // Tell the range in which val lies (strict => boundary match not ok)
            .    .    .             .      .     .         .       .       .         if(strict) {
    5,001,000    2    2             0      0     0         0       0       0            for(int r=0; r<_num; r++) // Look through all intervals
            .    .    .             .      .     .         .       .       .               if(_ranges[r].strictlyin(val))
            .    .    .             .      .     .         .       .       .                  return r;
            .    .    .             .      .     .         .       .       .         } else {
7,537,944,813    1    1     3,027,216      3     0         0       0       0            for(int r=0; r<_num; r++) // Look through all intervals
1,517,881,497    3    3     3,027,216      0     0         0       0       0               if(_ranges[r].within(val))
            .    .    .             .      .     .         .       .       .                  return r;
            .    .    .             .      .     .         .       .       .         }
      189,201    0    0       189,201      0     0         0       0       0         return BADRANGE; // Did not find any range
            .    .    .             .      .     .         .       .       .     }
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .     void inspect() {
            .    .    .             .      .     .         .       .       .        for(int r=0; r<_num; r++) { 
            .    .    .             .      .     .         .       .       .           std::cout << r << "," << &_ranges[r] << ": " << _ranges[r].lo << ", " << _ranges[r].hi << "\n"; 
            .    .    .             .      .     .         .       .       .        }
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .     }
            .    .    .             .      .     .         .       .       .  
        9,006    0    0             0      0     0         0       0       0     int num() const { return _num; }
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .  private:
            .    .    .             .      .     .         .       .       .     Range *_ranges;
            .    .    .             .      .     .         .       .       .     int   _num;
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .     void set(int i, int lo, int hi) { // set the extreme values of a specific interval
            .    .    .             .      .     .         .       .       .        if(i < _num) {
      503,500    0    0             0      0     0   501,500       0       0            _ranges[i].lo = lo;
    1,002,000    0    0             0      0     0   501,500       0       0            _ranges[i].hi = hi;
            .    .    .             .      .     .         .       .       .        }
        1,000    0    0         1,000      0     0         0       0       0     }
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .     bool newrange(const Range r) { // Is the range r already in my list, or is it a new one?
        1,000    0    0             0      0     0         0       0       0        return (range(r.lo, true) == BADRANGE && range(r.hi, true) == BADRANGE); // Overlaps are not allowed.
            .    .    .             .      .     .         .       .       .     }
            .    .    .             .      .     .         .       .       .  };
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .  struct Data {
            .    .    .             .      .     .         .       .       .  
    4,036,288    1    1             0      0     0 4,036,288 504,536 504,536     struct Item {
            .    .    .             .      .     .         .       .       .        int key;
            .    .    .             .      .     .         .       .       .        int value = -1;
            .    .    .             .      .     .         .       .       .     };
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .     unsigned int ndata = 0;
            .    .    .             .      .     .         .       .       .     Item *data = NULL;
            .    .    .             .      .     .         .       .       .  
            3    0    0             0      0     0         3       3       0     Data(int n) { // n = Maximum number of items  storable
            3    0    0             0      0     0         3       0       0        ndata = n;
   12,108,926    1    1             6      0     0        14       6       3        data = new Item[n];
            .    .    .             .      .     .         .       .       .        assert(NULL != data);
            .    .    .             .      .     .         .       .       .     }
            .    .    .             .      .     .         .       .       .  
            .    .    .             .      .     .         .       .       .     void reset() {
    9,081,654    0    0             0      0     0         0       0       0        for(int i=0; i<ndata; i++)
    3,027,231    3    3             3      0     0 3,027,216 378,405 378,405           data[i].value = -1;
            .    .    .             .      .     .         .       .       .     }
            .    .    .             .      .     .         .       .       .     void inspect() {
            .    .    .             .      .     .         .       .       .        for(int i=0; i<ndata; i++)
            .    .    .             .      .     .         .       .       .           std::cout << i << ": " << data[i].key << " -- " << data[i].value <<"\n";
            .    .    .             .      .     .         .       .       .     }
            .    .    .             .      .     .         .       .       .  };

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/levio_sa/IITD Folder/Sem6/COL380/Submission/New/classify.cpp
--------------------------------------------------------------------------------
Ir         I1mr ILmr Dr         D1mr      DLmr      Dw        D1mw    DLmw    

         .    .    .          .         .         .         .       .       .  #include "classify.h"
         .    .    .          .         .         .         .       .       .  #include <omp.h>
         .    .    .          .         .         .         .       .       .  
         .    .    .          .         .         .         .       .       .  Data classify(Data &D, const Ranges &R, unsigned int numt)
        36    3    3          3         0         0        21       0       0  { // Classify each item in D into intervals (given by R). Finally, produce in D2 data sorted by interval
         6    0    0          0         0         0         0       0       0     assert(numt < MAXTHREADS);
     9,270    8    8         51        49        49         3       3       0     Counter counts[R.num()]; // I need on counter per interval. Each counter can keep pre-thread subcount.
         .    .    .          .         .         .         .       .       .     
         .    .    .          .         .         .         .       .       .     // #pragma omp parallel num_threads(numt)
         .    .    .          .         .         .         .       .       .     // {
         .    .    .          .         .         .         .       .       .     //    int tid = omp_get_thread_num(); // I am thread number tid
         .    .    .          .         .         .         .       .       .     //    for(int i=tid; i<D.ndata; i+=numt) { // Threads together share-loop through all of Data
         .    .    .          .         .         .         .       .       .     //       int v = D.data[i].value = R.range(D.data[i].key);// For each data, find the interval of data's key,
         .    .    .          .         .         .         .       .       .  	// 						  // and store the interval id in value. D is changed.
         .    .    .          .         .         .         .       .       .     //       counts[v].increase(tid); // Found one key in interval v
-- line 15 ----------------------------------------
-- line 38 ----------------------------------------
         .    .    .          .         .         .         .       .       .     //                         // and store the interval id in value. D is changed.
         .    .    .          .         .         .         .       .       .     //             counts[v].increase(tid); // Found one key in interval v
         .    .    .          .         .         .         .       .       .     //          }
         .    .    .          .         .         .         .       .       .     //       }
         .    .    .          .         .         .         .       .       .     //    }
         .    .    .          .         .         .         .       .       .     // }
         .    .    .          .         .         .         .       .       .  
         .    .    .          .         .         .         .       .       .     int sblock = 16;
         9    0    0          0         0         0         3       0       0     int bblock = 16*numt;
       297    3    3        123        24         5       111      12       8     #pragma omp parallel num_threads(numt)
         .    .    .          .         .         .         .       .       .     {
        12    0    0          0         0         0        12       0       0        int tid = omp_get_thread_num();
   756,876    6    6    378,432        19         6         0       0       0        for(int x=0; x<D.ndata; x+=bblock){
 1,324,428    3    3    189,204         0         0         0       0       0           int y = ((x+bblock)<D.ndata)?(x+bblock):(D.ndata);
       108    0    0         12         0         0        12       0       0           int tmp = x+tid*sblock;
 6,811,245    0    0    189,204         0         0         0       0       0           for(int i=tmp; i<std::min(tmp+sblock,y);++i){
 7,378,851    0    0  3,216,429   567,603   535,188 3,027,216       7       0              int v = D.data[i].value = R.range(D.data[i].key);// For each data, find the interval of data's key,
         .    .    .          .         .         .         .       .       .                          // and store the interval id in value. D is changed.
 3,027,216    0    0  3,027,216    11,914     1,720         0       0       0              counts[v].increase(tid); // Found one key in interval v
         .    .    .          .         .         .         .       .       .           }
         .    .    .          .         .         .         .       .       .        }
         .    .    .          .         .         .         .       .       .     }
         .    .    .          .         .         .         .       .       .  
         .    .    .          .         .         .         .       .       .  
         .    .    .          .         .         .         .       .       .  
         .    .    .          .         .         .         .       .       .     // Contiguous blocks
         .    .    .          .         .         .         .       .       .     // # pragma omp parallel num_threads(numt)
-- line 64 ----------------------------------------
-- line 94 ----------------------------------------
         .    .    .          .         .         .         .       .       .     //       }
         .    .    .          .         .         .         .       .       .     //    }
         .    .    .          .         .         .         .       .       .     // }
         .    .    .          .         .         .         .       .       .  
         .    .    .          .         .         .         .       .       .  
         .    .    .          .         .         .         .       .       .  
         .    .    .          .         .         .         .       .       .  
         .    .    .          .         .         .         .       .       .     // Accumulate all sub-counts (in each interval;'s counter) into rangecount
        21    2    2          3         0         0         3       0       0     unsigned int *rangecount = new unsigned int[R.num()];
     6,036    2    2          6         3         1         0       0       0     for(int r=0; r<R.num(); r++) { // For all intervals
     3,003    0    0          0         0         0     3,003     187     184        rangecount[r] = 0;
    45,045    0    0      6,006     3,003       287         0       0       0        for(int t=0; t<numt; t++) // For all threads
    12,012    2    2     12,012         0         0         0       0       0           rangecount[r] += counts[r].get(t);
         .    .    .          .         .         .         .       .       .        // std::cout << rangecount[r] << " elements in Range " << r << "\n"; // Debugging statement
         .    .    .          .         .         .         .       .       .     }
         .    .    .          .         .         .         .       .       .  
         .    .    .          .         .         .         .       .       .     // Parallel
         .    .    .          .         .         .         .       .       .     // int pad = 16;
         .    .    .          .         .         .         .       .       .     // unsigned int *rangecount = new unsigned int[R.num()*pad];
         .    .    .          .         .         .         .       .       .     // int rlen = R.num()/numt;
         .    .    .          .         .         .         .       .       .     // #pragma omp parallel num_threads(numt)
-- line 114 ----------------------------------------
-- line 130 ----------------------------------------
         .    .    .          .         .         .         .       .       .     //       }
         .    .    .          .         .         .         .       .       .     //    // std::cout << rangecount[r] << " elements in Range " << r << "\n"; // Debugging statement
         .    .    .          .         .         .         .       .       .     // }
         .    .    .          .         .         .         .       .       .  
         .    .    .          .         .         .         .       .       .  
         .    .    .          .         .         .         .       .       .  
         .    .    .          .         .         .         .       .       .  
         .    .    .          .         .         .         .       .       .     // Compute prefx sum on rangecount.
     6,018    0    0          0         0         0         0       0       0     for(int i=1; i<R.num(); i++) {
     6,000    0    0      6,000       146         0         0       0       0        rangecount[i] += rangecount[i-1];
         .    .    .          .         .         .         .       .       .     }
         .    .    .          .         .         .         .       .       .  
         .    .    .          .         .         .         .       .       .     // Now rangecount[i] has the number of elements in intervals before the ith interval.
         .    .    .          .         .         .         .       .       .  
         3    2    2          3         3         3         0       0       0     Data D2 = Data(D.ndata); // Make a copy
         .    .    .          .         .         .         .       .       .     
         .    .    .          .         .         .         .       .       .     // #pragma omp parallel num_threads(numt)
         .    .    .          .         .         .         .       .       .     // {
         .    .    .          .         .         .         .       .       .     //    int tid = omp_get_thread_num();
         .    .    .          .         .         .         .       .       .     //    for(int r=tid; r<R.num(); r+=numt) { // Thread together share-loop through the intervals 
         .    .    .          .         .         .         .       .       .     //       int rcount = 0;
         .    .    .          .         .         .         .       .       .     //       for(int d=0; d<D.ndata; d++) // For each interval, thread loops through all of data and  
         .    .    .          .         .         .         .       .       .     //           if(D.data[d].value == r) // If the data item is in this interval 
-- line 152 ----------------------------------------
-- line 164 ----------------------------------------
         .    .    .          .         .         .         .       .       .     // With parallel
         .    .    .          .         .         .         .       .       .     // for(int i=0;i<D.ndata;++i){
         .    .    .          .         .         .         .       .       .     //    if(D2.data[i].value==-1){
         .    .    .          .         .         .         .       .       .     //       std::cout<<"FAULT\n";
         .    .    .          .         .         .         .       .       .     //       // exit(0);
         .    .    .          .         .         .         .       .       .     //       break;
         .    .    .          .         .         .         .       .       .     //    }
         .    .    .          .         .         .         .       .       .     // }
        21    2    2          3         3         3         6       3       3     unsigned int *rct = new unsigned int[R.num()];
       231    3    3         99        19        18        69       3       3     #pragma omp parallel num_threads(numt)
         .    .    .          .         .         .         .       .       .     {
        12    3    3          0         0         0        12       0       0        int tid = omp_get_thread_num();
        84    0    0         24        16        14         0       0       0        int a = ((tid)*R.num())/numt;
        36    0    0          0         0         0         0       0       0        int b = ((tid+1)*R.num())/numt;
36,326,676    0    0 12,108,900         3         3         0       0       0        for(int d=0; d<D.ndata; ++d){
12,108,864    3    3 12,108,864 1,513,621 1,438,683         0       0       0           int r = D.data[d].value;
39,305,694    0    0          0         0         0         0       0       0           if(a<=r && r<b){
45,408,240    0    0 15,136,080       414       398 6,054,432 378,417 378,414              D2.data[((r==0)?0:rangecount[r-1])+rct[r]++] = D.data[d];
         .    .    .          .         .         .         .       .       .           }
         .    .    .          .         .         .         .       .       .        }
         .    .    .          .         .         .         .       .       .     }
         .    .    .          .         .         .         .       .       .  
         .    .    .          .         .         .         .       .       .     // D2.inspect();
         .    .    .          .         .         .         .       .       .     // D.inspect();
         6    0    0          6         3         3         0       0       0     return D2;
        36    0    0         27         9         9         0       0       0  }

--------------------------------------------------------------------------------
Ir             I1mr ILmr Dr            D1mr      DLmr      Dw         D1mw      DLmw      
--------------------------------------------------------------------------------
15,315,639,740   56   56 3,079,295,493 2,113,176 1,979,142 21,384,859 1,333,132 1,333,106  events annotated

